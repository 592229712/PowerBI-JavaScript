{
  "_args": [
    [
      {
        "raw": "window-post-message-proxy@^0.2",
        "scope": null,
        "escapedName": "window-post-message-proxy",
        "name": "window-post-message-proxy",
        "rawSpec": "^0.2",
        "spec": ">=0.2.0 <0.3.0",
        "type": "range"
      },
      "c:\\PowerBI\\Mirror\\github\\PowerBI-javascript\\demo\\node_modules\\powerbi-client"
    ]
  ],
  "_from": "window-post-message-proxy@>=0.2.0 <0.3.0",
  "_id": "window-post-message-proxy@0.2.4",
  "_inCache": true,
  "_location": "/window-post-message-proxy",
  "_nodeVersion": "6.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/window-post-message-proxy-0.2.4.tgz_1472328334271_0.6439996943809092"
  },
  "_npmUser": {
    "name": "powerbi",
    "email": "nugetpowerbi@microsoft.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "window-post-message-proxy@^0.2",
    "scope": null,
    "escapedName": "window-post-message-proxy",
    "name": "window-post-message-proxy",
    "rawSpec": "^0.2",
    "spec": ">=0.2.0 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/powerbi-client"
  ],
  "_resolved": "https://registry.npmjs.org/window-post-message-proxy/-/window-post-message-proxy-0.2.4.tgz",
  "_shasum": "fbaa4b9ed03e63c0d7b3b7dd79b5bd1b5a633664",
  "_shrinkwrap": null,
  "_spec": "window-post-message-proxy@^0.2",
  "_where": "c:\\PowerBI\\Mirror\\github\\PowerBI-javascript\\demo\\node_modules\\powerbi-client",
  "author": {
    "name": "Microsoft Power BI"
  },
  "bugs": {
    "url": "https://github.com/Microsoft/window-post-message-proxy/issues"
  },
  "dependencies": {
    "es6-promise": "^3.1.2"
  },
  "description": "A library used in place of the native window.postMessage which when used on both the sending and receiving windows allow for a nicer asynchronouse promise messaging between the windows",
  "devDependencies": {
    "del": "^2.2.1",
    "gulp": "^3.9.1",
    "gulp-gh-pages": "^0.5.4",
    "gulp-header": "^1.8.7",
    "gulp-help": "^1.6.1",
    "gulp-rename": "^1.2.2",
    "gulp-replace": "^0.5.4",
    "gulp-tslint": "^6.1.1",
    "gulp-typedoc": "^2.0.0",
    "gulp-uglify": "^1.5.3",
    "jasmine-core": "^2.4.1",
    "jquery": "^2.2.3",
    "karma": "^0.13.22",
    "karma-chrome-launcher": "^1.0.1",
    "karma-coverage": "^0.5.5",
    "karma-jasmine": "^0.3.8",
    "karma-phantomjs-launcher": "^1.0.0",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-spec-reporter": "0.0.26",
    "moment": "^2.14.1",
    "phantomjs-prebuilt": "^2.1.7",
    "run-sequence": "^1.1.5",
    "ts-loader": "^0.8.2",
    "tslint": "^3.15.0",
    "typedoc": "^0.4.4",
    "typescript": "^1.8.10",
    "typings": "^1.3.2",
    "webpack-stream": "^3.2.0",
    "yargs": "^4.6.0"
  },
  "directories": {},
  "dist": {
    "shasum": "fbaa4b9ed03e63c0d7b3b7dd79b5bd1b5a633664",
    "tarball": "https://registry.npmjs.org/window-post-message-proxy/-/window-post-message-proxy-0.2.4.tgz"
  },
  "files": [
    "dist"
  ],
  "gitHead": "b478f315543d8ee39ff62f1a354258ed4e12bbc3",
  "homepage": "https://github.com/Microsoft/window-post-message-proxy#readme",
  "keywords": [
    "window",
    "post",
    "message",
    "postmessage",
    "iframe",
    "proxy"
  ],
  "license": "MIT",
  "main": "dist/windowPostMessageProxy.js",
  "maintainers": [
    {
      "name": "powerbi",
      "email": "nugetpowerbi@microsoft.com"
    }
  ],
  "name": "window-post-message-proxy",
  "optionalDependencies": {},
  "publishConfig": {
    "tag": "beta"
  },
  "readme": "# window-post-message-proxy\n[![Travis branch](https://img.shields.io/travis/Microsoft/window-post-message-proxy.svg)](https://travis-ci.org/Microsoft/window-post-message-proxy)\n[![npm](https://img.shields.io/npm/v/window-post-message-proxy.svg)](https://www.npmjs.com/package/window-post-message-proxy)\n[![Total Downloads](https://img.shields.io/npm/dt/window-post-message-proxy.svg)](https://www.npmjs.com/package/window-post-message-proxy)\n[![Monthly Downloads](https://img.shields.io/npm/dm/window-post-message-proxy.svg)](https://www.npmjs.com/package/window-post-message-proxy)\n[![GitHub tag](https://img.shields.io/github/tag/microsoft/window-post-message-proxy.svg)](https://github.com/Microsoft/window-post-message-proxy)\n\nA library used in place of the native window.postMessage which when used on both the sending and receiving windows allow for a nicer asynchronous promise messaging between the windows.\n\nWhen sending messages using the proxy, it will apply a unique id to the message, create a deferred object referenced by the id, and pass the message on to the target window.\nThe target window will also have an instance of the windowPostMessage proxy setup which will send back messages and preserve the unique id.\nThen the original sending instance receives the response message with id, it will look to see if there is matching id in cache and if so resolve the deferred object with the response.\n\n## Documentation\n### [https://microsoft.github.io/window-post-message-proxy](https://microsoft.github.io/window-post-message-proxy)\n\n## Installation\n\n```bash\nnpm install --save window-post-message-proxy\n```\n\n## Basic Usage\n\n```typescript\n// Setup\nconst iframe = document.getElementById(\"myFrame\");\nconst windowPostMessageProxy = new WindowPostMessageProxy();\n\n// Send message\nconst message = {\n    key: \"Value\"\n};\n\nwindowPostMessageProxy.postMessage(iframe.conentWindow, message)\n    .then(response => {\n        \n    });\n```\n\n## Advanced Customization\n\n### Customizing how tracking properties are added to the method\n\nBy default the windowPostMessage proxy will store the tracking properties as object on the message by known property: `windowPostMesssageProxy`.\n\nThis means if you call:\n\n```typescript\nconst message = {\n    key: \"Value\"\n};\n\nwindowPostMessageProxy.postMessage(iframe.conentWindow, message);\n```\nThe message is actually modified before it's sent to become:\n\n```typescript\n{\n    windowPostMessageProxy: {\n        id: \"ebixvvlbwa3tvtjra4i\"\n    },\n    key: \"Value\"\n};\n```\n\nIf you want to customize how the tracking properties are added to and retrieved from the message you can provide it at construction time as an object with two functions. See the interface below:\n\n```typescript\nexport interface IProcessTrackingProperties {\n  addTrackingProperties<T>(message: T, trackingProperties: ITrackingProperties): T;\n  getTrackingProperties(message: any): ITrackingProperties;\n}\n```\n`addTrackingProperties` takes a message and adds the tracking properties object and returns the message.\n`getTrackingProperties` takes a message and extracts the tracking properties.\n\n\nExample:\n\n```typescript\nconst customProcessTrackingProperties = {\n    addTrackingProperties(message, trackingProperties) {\n        message.headers = {\n            'tracking-id': trackingProperties.id\n        };\n        \n        return message;\n    },\n    getTrackingProperties(message): ITrackingProperties {\n        return {\n            id: message.headers['tracking-id']\n        };\n    }\n};\nconst windowPostMessageProxy = new WindowPostMessageProxy(customProcessTrackingProperties);\n```\n\n### Customizing how messages are detected as error responses.\n\nBy default response messages are considered error message if they contain an error property.\n\nYou can override this behavior by passing an `isErrorMessage` function at construction time. See interface:\n\n```typescript\nexport interface IIsErrorMessage {\n  (message: any): boolean;\n}\n```\n\nExample:\n\n```typescript\nfunction isErrorMessage(message: any) {\n    return !(200 <= message.status && message.status < 300);\n}\n\nconst windowPostMessageProxy = new WindowPostMessageProxy({ isErrorMessage });\n```\n\n### Logging messages\n\nBy default messages are not logged, but you can override this behavior by passing `logMessages: true` in the options object.\n\n```typescript\nconst windowPostMessageProxy = new WindowPostMessageProxy({ logMessages: true });\n```\nThis will print out a stringified JSON of each object that is received or sent by the specific instance.\n\n### Supplying custom name\nEach windowPostMessageProxy gives itself a randomly generated name so you can see which instance is communicating in the log messages.\nOften times you may want to pass a custom name for which window the windowPostMessageProxy instance is running.\n\nYou can provided a name by passing `name: 'Iframe'` in the options object.\n\n```typescript\nconst windowPostMessageProxy = new WindowPostMessageProxy({ name: 'Iframe' });\n```\n\n### Supress Warning Message about unhandled messages\nBy default the window post message proxy will warn you if it received a message that was not handled since this is usually an indication of error; however,\nif you are register multiple window message handlers the message may handled but it's just not able to be known by the windowPostMessageProxy and this warning no longer applies.\n\n```typescript\nconst windowPostMessageProxy = new WindowPostMessageProxy({ suppressMessageNotHandledWarning: true });\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Microsoft/window-post-message-proxy.git"
  },
  "scripts": {
    "build": "gulp build",
    "gulp": "gulp",
    "prepublish": "typings install && gulp build",
    "test": "gulp test",
    "typings": "typings"
  },
  "typings": "dist/windowPostMessageProxy.d.ts",
  "version": "0.2.4"
}
